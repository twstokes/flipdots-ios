//
//  ImageProcessing.swift
//  Flipper
//
//  Created by Tanner W. Stokes on 5/10/25.
//
// This code was generated by ChatGPT o4-mini-high
import UIKit

/// Processes an image into a 28×14 boolean canvas:
/// 1. Grayscale → 8-bit pixel buffer
/// 2. Threshold → binary (0 or 255)
/// 3. Find first black pixel
/// 4. Crop from that point with 2:1 aspect ratio
/// 5. Downsample/cell-average to 28×14 booleans
func monochromeBooleanCanvas(from image: UIImage,
                             thresholdValue: UInt8 = 128) -> [[Bool]]?
{
    // 1) Get CGImage and dimensions
    guard let cg = image.cgImage else { return nil }
    let width = cg.width
    let height = cg.height

    // 2) Render into an 8-bit gray buffer
    let colorSpace = CGColorSpaceCreateDeviceGray()
    var grayPixels = [UInt8](repeating: 0, count: width * height)
    guard let ctx = CGContext(data: &grayPixels,
                              width: width,
                              height: height,
                              bitsPerComponent: 8,
                              bytesPerRow: width,
                              space: colorSpace,
                              bitmapInfo: CGImageAlphaInfo.none.rawValue)
    else { return nil }

    ctx.draw(cg, in: CGRect(x: 0, y: 0, width: width, height: height))

    // 3) Threshold into binary (0 = black, 255 = white)
    let binary = grayPixels.map { $0 < thresholdValue ? UInt8(0) : UInt8(255) }

    // 4) Locate first black pixel (scanning row-major)
    var originX: Int?
    var originY: Int?
    for y in 0 ..< height {
        let rowStart = y * width
        if let x = (0 ..< width).first(where: { binary[rowStart + $0] == 0 }) {
            originX = x
            originY = y
            break
        }
    }
    guard let x0 = originX, let y0 = originY else {
        // no black pixels → nothing to crop
        return nil
    }

    // 5) Determine maximum crop rectangle from (x0,y0)
    let maxW = width - x0
    let maxH = height - y0
    // Want aspect = 2:1 (width:height).
    // If width-limited, height = width/2; else width = height*2
    let cropW: Int
    let cropH: Int
    if maxW / 2 <= maxH {
        cropW = maxW
        cropH = maxW / 2
    } else {
        cropW = maxH * 2
        cropH = maxH
    }

    // 6) Downsample that crop to 28×14
    let targetCols = 28
    let targetRows = 14
    var canvas = Array(
        repeating: Array(repeating: false, count: targetCols),
        count: targetRows
    )

    for row in 0 ..< targetRows {
        for col in 0 ..< targetCols {
            // Map each target cell to a source pixel (nearest-neighbor)
            let srcX = x0 + Int(Double(col) * Double(cropW) / Double(targetCols))
            let srcY = y0 + Int(Double(row) * Double(cropH) / Double(targetRows))
            let pixel = binary[srcY * width + srcX]
            canvas[row][col] = (pixel == 0) // black → true
        }
    }

    return canvas
}
